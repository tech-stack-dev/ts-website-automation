name: Playwright UI E2E

on:
  workflow_dispatch:
  schedule:
    # Run each day at 21:10
    - cron: "10 21 * * *"
  pull_request:
    paths:
      - "ui_tests_playwright/**"

# To cancel previous run within one PR after pushing new commit (if previous still in progress)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:        
  tests_e2e:
    name: Playwright end-to-end tests
    runs-on: ubuntu-latest
    # Set up queue for parallel actions
    concurrency:
      group: ${{ github.event_name }}

    env:
      AWS_KEY: ${{ secrets.AWS_KEY }}
      AWS_PASSWORD: ${{ secrets.AWS_PASSWORD }}
      JIRA_AUTH_TOKEN: ${{ secrets.JIRA_AUTH_TOKEN }}
      CI: true
    defaults:
      run:
        working-directory: ./ui_tests_playwright
    steps:
      - uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm ci

      - name: Install TypeScript and ts-node
        run: npm install -g typescript ts-node

      - name: Run Search and Collect Ticket Statuses
        id: ticket-statuses
        run: |
          npx ts-node automation/scripts/GetListOfJirasToSkip.ts
          ticketStatusesFile="ticketStatuses.json"
          if [[ -f "$ticketStatusesFile" ]]; then
            ticketStatuses=$(cat "$ticketStatusesFile" | jq -r 'join("|")')
          else
            ticketStatuses=""
          fi
          echo "ticketStatuses=$ticketStatuses" >> $GITHUB_OUTPUT

      - name: Install playwright browsers
        run: npx playwright install --with-deps

      - name: Run Unit Tests
        run: npm run unit-tests

      - name: Run UI tests
        shell: bash
        run: QASE_REPORT="1" npx playwright test --grep-invert "${{ steps.ticket-statuses.outputs.ticketStatuses }}"

      - uses: actions/upload-artifact@v3
        name: Upload Playwright report
        if: always()
        with:
          name: playwright-report
          path: ui_tests_playwright/playwright-report/
          retention-days: 30

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ui_tests_playwright/playwright-report
          publish_branch: gh-pages

      - name: Display Playwright Report Link
        if: always()
        run: |
          echo "::warning ::Tests execution report: https://tech-stack-dev.github.io/ts-website-automation/index.html"

      - name: Preparing Slack emoji
        uses: haya14busa/action-cond@v1
        if: ${{ (!github.event.pull_request.draft && ((github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') || (github.event_name == 'pull_request' && failure()))) }}
        id: slack_icon_emoji
        with:
          cond: ${{ job.status == 'failure' }}
          if_true: ":finnadie:"
          if_false: ":aw_yeah:"

      - name: Set Slack Channel production
        uses: haya14busa/action-cond@v1
        if: ${{ (!github.event.pull_request.draft && ((github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') || (github.event_name == 'pull_request' && failure()))) }}
        id: slack_channel_production
        with:
          cond: ${{ github.event_name == 'pull_request' && job.status == 'failure' }}
          if_true: ts_website_automation
          if_false: ts_website

      - name: Set Slack Channel automation
        uses: haya14busa/action-cond@v1
        if: ${{ (!github.event.pull_request.draft && ((github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') || (github.event_name == 'pull_request' && failure()))) }}
        id: slack_channel_automation
        with:
          cond: ${{ github.event_name == 'pull_request' && job.status == 'failure' }}
          if_true: test_slack_notifications
          if_false: ts_website_automation

      - name: Parse Test Results
        if: always()
        run: | 
          chmod +x ./automation/scripts/ParseAutotestsResult
          ./automation/scripts/ParseAutotestsResult
          
      - name: Slack Notification for UI tests production
        if: ${{ (!github.event.pull_request.draft && ((github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') || (github.event_name == 'pull_request' && failure()))) }}
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_USERNAME: Tests execution report
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: test_slack_notifications
          SLACK_ICON_EMOJI: ${{ steps.slack_icon_emoji.outputs.value }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "Total: ${{ env.total }} \n✅Passed: ${{ env.passed }} \n❌Failed: ${{ env.failed }} \n⚠️Skipped: ${{ env.skipped }}, \n:eyes: link for report below \n ${{ github.server_url }}/${{ github.repository }}/actions/s/${{ github._id }}"
          SLACK_TITLE: TypeScript UI tests
          MSG_MINIMAL: true
          SLACK_FOOTER: TS website

      - name: Slack Notification for UI tests automation
        if: ${{ (!github.event.pull_request.draft && ((github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') || (github.event_name == 'pull_request' && failure()))) }}
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_USERNAME: Tests execution report
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: test_slack_notifications
          SLACK_ICON_EMOJI: ${{ steps.slack_icon_emoji.outputs.value }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "Total: ${{ env.total }}, \n✅Passed: ${{ env.passed }} \\ ${{ env.total }} \n❌Failed: ${{ env.failed }} \\ ${{ env.total }}, \n⚠️Skipped: ${{ env.skipped }} \\ ${{ env.total }}, \n:eyes: link for report below \n ${{ github.server_url }}/${{ github.repository }}/actions/s/${{ github._id }}"
          SLACK_TITLE: TypeScript UI tests
          MSG_MINIMAL: true
          SLACK_FOOTER: TS website
          
