name: Playwright UI E2E

on:
  workflow_dispatch:
  schedule:
    # Run each day at 21:10
    - cron: "10 21 * * *"
  pull_request:
    paths:
      - "ui_tests_playwright/**"

jobs:
  tests_e2e:
    name: Playwright end-to-end tests
    runs-on: ubuntu-latest
    # Set up queue for parallel actions
    concurrency:
      group: ${{ github.event_name }}

    env:
      AWS_KEY: ${{ secrets.AWS_KEY }}
      AWS_PASSWORD: ${{ secrets.AWS_PASSWORD }}
      JIRA_AUTH_TOKEN: ${{ secrets.JIRA_AUTH_TOKEN }}
      CI: true
      TOTAL_TESTS: 0
      PASSED_TESTS: 0
      FAILED_TESTS: 0
      SKIPPED_TESTS: 0
      TEST_VAR: ""

    defaults:
      run:
        working-directory: ./ui_tests_playwright

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm ci

      - name: Install TypeScript and ts-node
        run: npm install -g typescript ts-node

      - name: Run Search and Collect Ticket Statuses
        id: ticket-statuses
        run: |
          npx ts-node automation/scripts/GetListOfJirasToSkip.ts
          ticketStatusesFile="ticketStatuses.json"
          if [[ -f "$ticketStatusesFile" ]]; then
            ticketStatuses=$(cat "$ticketStatusesFile" | jq -r 'join("|")')
          else
            ticketStatuses=""
          fi
          echo "ticketStatuses=$ticketStatuses" >> $GITHUB_OUTPUT

      - name: Install playwright browsers
        run: npx playwright install --with-deps

      - name: Run Unit Tests
        run: npm run unit-tests

      - name: Run UI tests
        id: playwright_tests
        shell: bash
        run: |
          QASE_REPORT="1" npx playwright test --grep "@TSWEB-695" --output=tests_output.txt

      - name: Set Test Counts
        id: tests_count
        run: | 
          total_tests=$(grep -c "✅\|❌\|⚠️" tests_output.txt)
          passed_tests=$(grep -c "Passed" tests_output.txt)
          failed_tests=$(grep -c "Failed" tests_output.txt)
          skipped_tests=$(grep -c "Skipped" tests_output.txt)
          test_var="check if this var is called"

          echo "TOTAL_TESTS=$total_tests" >> $GITHUB_ENV
          echo "PASSED_TESTS=$passed_tests" >> $GITHUB_ENV
          echo "FAILED_TESTS=$failed_tests" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=$skipped_tests" >> $GITHUB_ENV
          echo "TEST_VAR=$test_var" >> $GITHUB_ENV

      # ... (other steps)

      - name: Slack Notification for UI tests automation
        if: ${{ (!github.event.pull_request.draft && ((github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') || (github.event_name == 'pull_request' && failure()))) }}
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_USERNAME: Tests execution report
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ${{ steps.slack_channel_automation.outputs.value }}
          SLACK_ICON_EMOJI: ${{ steps.slack_icon_emoji.outputs.value }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "Regression tests results: \n Total tests: ${{ env.TOTAL_TESTS }} \n Passed Tests: ${{ env.PASSED_TESTS }} \n Failed Tests: ${{ env.FAILED_TESTS }} \n Skipped Tests: ${{ env.SKIPPED_TESTS }} \n Test var: ${{ env.TEST_VAR }} \n 👀 Check the report with the link below \n ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          SLACK_TITLE: TypeScript UI tests
          MSG_MINIMAL: true
          SLACK_FOOTER: TS website
