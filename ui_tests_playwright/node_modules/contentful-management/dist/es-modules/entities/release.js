function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/* eslint-disable @typescript-eslint/no-explicit-any */
import { freezeSys, toPlainObject } from 'contentful-sdk-core';
import copy from 'fast-copy';
import { ScheduledActionReferenceFilters } from '../common-types';
import { wrapCursorPaginatedCollection } from '../common-utils';
import enhanceWithMethods from '../enhance-with-methods';
import { wrapReleaseAction } from './release-action';

/** Entity types supported by the Release API */

export const ReleaseReferenceFilters = ScheduledActionReferenceFilters;

/** The object returned by the Releases API */

/**
 * @private
 */
function createReleaseApi(makeRequest) {
  const getParams = self => {
    const release = self.toPlainObject();
    return {
      spaceId: release.sys.space.sys.id,
      environmentId: release.sys.environment.sys.id,
      releaseId: release.sys.id,
      version: release.sys.version
    };
  };
  return {
    archive() {
      var _this = this;
      return _asyncToGenerator(function* () {
        const params = getParams(_this);
        return makeRequest({
          entityType: 'Release',
          action: 'archive',
          params
        }).then(release => wrapRelease(makeRequest, release));
      })();
    },
    unarchive() {
      var _this2 = this;
      return _asyncToGenerator(function* () {
        const params = getParams(_this2);
        return makeRequest({
          entityType: 'Release',
          action: 'unarchive',
          params
        }).then(release => wrapRelease(makeRequest, release));
      })();
    },
    update(payload) {
      var _this3 = this;
      return _asyncToGenerator(function* () {
        const params = getParams(_this3);
        return makeRequest({
          entityType: 'Release',
          action: 'update',
          params,
          payload
        }).then(release => wrapRelease(makeRequest, release));
      })();
    },
    delete() {
      var _this4 = this;
      return _asyncToGenerator(function* () {
        const params = getParams(_this4);
        yield makeRequest({
          entityType: 'Release',
          action: 'delete',
          params
        });
      })();
    },
    publish(options) {
      var _this5 = this;
      return _asyncToGenerator(function* () {
        const params = getParams(_this5);
        return makeRequest({
          entityType: 'Release',
          action: 'publish',
          params
        }).then(data => wrapReleaseAction(makeRequest, data)).then(action => action.waitProcessing(options));
      })();
    },
    unpublish(options) {
      var _this6 = this;
      return _asyncToGenerator(function* () {
        const params = getParams(_this6);
        return makeRequest({
          entityType: 'Release',
          action: 'unpublish',
          params
        }).then(data => wrapReleaseAction(makeRequest, data)).then(action => action.waitProcessing(options));
      })();
    },
    validate(options) {
      var _this7 = this;
      return _asyncToGenerator(function* () {
        const params = getParams(_this7);
        return makeRequest({
          entityType: 'Release',
          action: 'validate',
          params,
          payload: options === null || options === void 0 ? void 0 : options.payload
        }).then(data => wrapReleaseAction(makeRequest, data)).then(action => action.waitProcessing(options === null || options === void 0 ? void 0 : options.processingOptions));
      })();
    }
  };
}
/**
 * Return a Release object enhanced with its own API helper functions.
 * @private
 * @param makeRequest - function to make requests via an adapter
 * @param data - Raw Release data
 * @return Wrapped Release data
 */
export function wrapRelease(makeRequest, data) {
  const release = toPlainObject(copy(data));
  const releaseWithApiMethods = enhanceWithMethods(release, createReleaseApi(makeRequest));
  return freezeSys(releaseWithApiMethods);
}

/**
 * @private
 */
export const wrapReleaseCollection = wrapCursorPaginatedCollection(wrapRelease);