function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/* eslint-disable @typescript-eslint/no-explicit-any */
import { freezeSys, toPlainObject } from 'contentful-sdk-core';
import copy from 'fast-copy';
import { wrapCollection } from '../common-utils';
import { pollAsyncActionStatus } from '../methods/action';
import enhanceWithMethods from '../enhance-with-methods';

/** The object returned by the Releases API */

/**
 * @private
 */
function createReleaseActionApi(makeRequest) {
  const getParams = self => {
    const action = self.toPlainObject();
    return {
      spaceId: action.sys.space.sys.id,
      environmentId: action.sys.environment.sys.id,
      releaseId: action.sys.release.sys.id,
      actionId: action.sys.id
    };
  };
  return {
    get() {
      var _this = this;
      return _asyncToGenerator(function* () {
        const params = getParams(_this);
        return makeRequest({
          entityType: 'ReleaseAction',
          action: 'get',
          params
        }).then(releaseAction => wrapReleaseAction(makeRequest, releaseAction));
      })();
    },
    /** Waits for a Release Action to complete */
    waitProcessing(options) {
      var _this2 = this;
      return _asyncToGenerator(function* () {
        return pollAsyncActionStatus( /*#__PURE__*/_asyncToGenerator(function* () {
          return _this2.get();
        }), options);
      })();
    }
  };
}
/**
 * @private
 * @param makeRequest - function to make requests via an adapter
 * @param data - Raw Release data
 * @return Wrapped Release data
 */
export function wrapReleaseAction(makeRequest, data) {
  const releaseAction = toPlainObject(copy(data));
  const releaseActionWithApiMethods = enhanceWithMethods(releaseAction, createReleaseActionApi(makeRequest));
  return freezeSys(releaseActionWithApiMethods);
}

/**
 * @private
 */
export const wrapReleaseActionCollection = wrapCollection(wrapReleaseAction);