function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/* eslint-disable @typescript-eslint/no-explicit-any */
import { freezeSys, toPlainObject } from 'contentful-sdk-core';
import copy from 'fast-copy';
import enhanceWithMethods from '../enhance-with-methods';
import { pollAsyncActionStatus } from '../methods/action';

/** Entity types supported by the BulkAction API */

/** Represents the state of the BulkAction */
export let BulkActionStatus = /*#__PURE__*/function (BulkActionStatus) {
  BulkActionStatus["created"] = "created";
  BulkActionStatus["inProgress"] = "inProgress";
  BulkActionStatus["succeeded"] = "succeeded";
  BulkActionStatus["failed"] = "failed";
  return BulkActionStatus;
}({});
const STATUSES = Object.values(BulkActionStatus);

/** The object returned by the BulkActions API */

/**
 * @private
 */
function createBulkActionApi(makeRequest) {
  const getParams = self => {
    const bulkAction = self.toPlainObject();
    return {
      spaceId: bulkAction.sys.space.sys.id,
      environmentId: bulkAction.sys.environment.sys.id,
      bulkActionId: bulkAction.sys.id
    };
  };
  return {
    get() {
      var _this = this;
      return _asyncToGenerator(function* () {
        const params = getParams(_this);
        return makeRequest({
          entityType: 'BulkAction',
          action: 'get',
          params
        }).then(bulkAction => wrapBulkAction(makeRequest, bulkAction));
      })();
    },
    waitProcessing(options) {
      var _this2 = this;
      return _asyncToGenerator(function* () {
        return pollAsyncActionStatus( /*#__PURE__*/_asyncToGenerator(function* () {
          return _this2.get();
        }), options);
      })();
    }
  };
}
/**
 * @private
 * @param makeRequest - function to make requests via an adapter
 * @param data - Raw BulkAction data
 * @return Wrapped BulkAction data
 */
export function wrapBulkAction(makeRequest, data) {
  const bulkAction = toPlainObject(copy(data));
  const bulkActionWithApiMethods = enhanceWithMethods(bulkAction, createBulkActionApi(makeRequest));
  return freezeSys(bulkActionWithApiMethods);
}