function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
import { pollAsyncActionStatus } from './action';
/** Waits for a ReleaseAction status to be either succeeded or failed.
 * Used by the Plain client */
export function waitForReleaseActionProcessing(_x, _x2) {
  return _waitForReleaseActionProcessing.apply(this, arguments);
}
function _waitForReleaseActionProcessing() {
  _waitForReleaseActionProcessing = _asyncToGenerator(function* ({
    plainClient,
    spaceId,
    environmentId,
    releaseId,
    actionId
  }, options) {
    return pollAsyncActionStatus( /*#__PURE__*/_asyncToGenerator(function* () {
      return plainClient.releaseAction.get({
        releaseId,
        spaceId,
        environmentId,
        actionId
      });
    }), options);
  });
  return _waitForReleaseActionProcessing.apply(this, arguments);
}