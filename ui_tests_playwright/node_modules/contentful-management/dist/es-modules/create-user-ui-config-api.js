function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
import entities from './entities';

/**
 * @private
 */

/**
 * @private
 */
export default function createUserUIConfigApi(makeRequest) {
  const wrapUserUIConfig = entities.userUIConfig.wrapUserUIConfig;
  const getParams = self => {
    const userUIConfig = self.toPlainObject();
    return {
      params: {
        spaceId: userUIConfig.sys.space.sys.id,
        environmentId: userUIConfig.sys.environment.sys.id
      },
      raw: userUIConfig
    };
  };
  return {
    /**
     * Sends an update to the server with any changes made to the object's properties
     * @return Object returned from the server with updated changes.
     * @example ```javascript
     * const contentful = require('contentful-management')
     *
     * const client = contentful.createClient({
     *   accessToken: '<content_management_api_key>'
     * })
     *
     * client.getSpace('<space_id>')
     * .then((space) => space.getEnvironment('<environment_id>'))
     * .then((environment) => environment.getUserUIConfig())
     * .then((uiConfig) => {
     *   uiConfig.entryListViews = [...]
     *   return uiConfig.update()
     * })
     * .then((uiConfig) => console.log(`UserUIConfig updated.`))
     * .catch(console.error)
     * ```
     */
    update: function () {
      var _update = _asyncToGenerator(function* () {
        const _getParams = getParams(this),
          raw = _getParams.raw,
          params = _getParams.params;
        const data = yield makeRequest({
          entityType: 'UserUIConfig',
          action: 'update',
          params,
          payload: raw
        });
        return wrapUserUIConfig(makeRequest, data);
      });
      function update() {
        return _update.apply(this, arguments);
      }
      return update;
    }()
  };
}