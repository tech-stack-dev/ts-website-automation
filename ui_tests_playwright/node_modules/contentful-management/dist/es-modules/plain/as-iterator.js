function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
import copy from 'fast-copy';
export const asIterator = (fn, params) => {
  return {
    [Symbol.asyncIterator]() {
      let options = copy(params);
      const get = () => fn(copy(options));
      let currentResult = get();
      return {
        current: 0,
        next() {
          var _this = this;
          return _asyncToGenerator(function* () {
            const _yield$currentResult = yield currentResult,
              _yield$currentResult$ = _yield$currentResult.total,
              total = _yield$currentResult$ === void 0 ? 0 : _yield$currentResult$,
              _yield$currentResult$2 = _yield$currentResult.items,
              items = _yield$currentResult$2 === void 0 ? [] : _yield$currentResult$2,
              _yield$currentResult$3 = _yield$currentResult.skip,
              skip = _yield$currentResult$3 === void 0 ? 0 : _yield$currentResult$3,
              _yield$currentResult$4 = _yield$currentResult.limit,
              limit = _yield$currentResult$4 === void 0 ? 100 : _yield$currentResult$4;
            if (total === _this.current) {
              return {
                done: true,
                value: null
              };
            }
            const value = items[_this.current++ - skip];
            const endOfPage = _this.current % limit === 0;
            const endOfList = _this.current === total;
            if (endOfPage && !endOfList) {
              options = _objectSpread(_objectSpread({}, options), {}, {
                query: _objectSpread(_objectSpread({}, options.query), {}, {
                  skip: skip + limit
                })
              });
              currentResult = get();
            }
            return {
              done: false,
              value
            };
          })();
        }
      };
    }
  };
};