const _excluded = ["spaceId", "environmentId"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { createRequestConfig } from 'contentful-sdk-core';
import entities from './entities';
export function createEnvironmentTemplateApi(makeRequest, organizationId) {
  const _entities$environment = entities.environmentTemplate,
    wrapEnvironmentTemplate = _entities$environment.wrapEnvironmentTemplate,
    wrapEnvironmentTemplateCollection = _entities$environment.wrapEnvironmentTemplateCollection;
  const wrapEnvironmentTemplateInstallationCollection = entities.environmentTemplateInstallation.wrapEnvironmentTemplateInstallationCollection;
  return {
    /**
     * Updates a environment template
     * @return Promise for new version of the template
     * ```javascript
     * const contentful = require('contentful-management')
     *
     * const client = contentful.createClient({
     *   accessToken: '<content_management_api_key>'
     * })
     *
     * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
     * .then((environmentTemplate) => {
     *   environmentTemplate.name = 'New name'
     *   return environmentTemplate.update()
     * })
     * .then((environmentTemplate) =>
     *   console.log(`Environment template ${environmentTemplate.sys.id} renamed.`)
     * ).catch(console.error)
     * ```
     */
    update: function updateEnvironmentTemplate() {
      const raw = this.toPlainObject();
      return makeRequest({
        entityType: 'EnvironmentTemplate',
        action: 'update',
        params: {
          organizationId,
          environmentTemplateId: raw.sys.id
        },
        payload: raw
      }).then(data => wrapEnvironmentTemplate(makeRequest, data, organizationId));
    },
    /**
     * Updates environment template version data
     * @param version.versionName - Name of the environment template version
     * @param version.versionDescription - Description of the environment template version
     * @return Promise for an updated EnvironmentTemplate
     * ```javascript
     * const contentful = require('contentful-management')
     *
     * const client = contentful.createClient({
     *   accessToken: '<content_management_api_key>'
     * })
     *
     * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
     * .then((environmentTemplate) => {
     *   return environmentTemplate.updateVersion({
     *     versionName: 'New Name',
     *     versionDescription: 'New Description',
     *   })
     * })
     * .then((environmentTemplate) =>
     *   console.log(`Environment template version ${environmentTemplate.sys.id} renamed.`)
     * ).catch(console.error)
     * ```
     */
    updateVersion: function updateEnvironmentTemplateVersion({
      versionName,
      versionDescription
    }) {
      const raw = this.toPlainObject();
      return makeRequest({
        entityType: 'EnvironmentTemplate',
        action: 'versionUpdate',
        params: {
          organizationId,
          environmentTemplateId: raw.sys.id,
          version: raw.sys.version
        },
        payload: {
          versionName,
          versionDescription
        }
      }).then(data => wrapEnvironmentTemplate(makeRequest, data, organizationId));
    },
    /**
     * Deletes the environment template
     * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.
     * @example ```javascript
     * const contentful = require('contentful-management')
     *
     * const client = contentful.createClient({
     *   accessToken: '<content_management_api_key>'
     * })
     *
     * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
     *   .then((environmentTemplate) => environmentTemplate.delete())
     *   .then(() => console.log('Environment template deleted.'))
     *   .catch(console.error)
     * ```
     */
    delete: function deleteEnvironmentTemplate() {
      const raw = this.toPlainObject();
      return makeRequest({
        entityType: 'EnvironmentTemplate',
        action: 'delete',
        params: {
          organizationId,
          environmentTemplateId: raw.sys.id
        }
      });
    },
    /**
     * Gets a collection of all versions for the environment template
     * @return Promise for a EnvironmentTemplate
     * ```javascript
     * const contentful = require('contentful-management')
     *
     * const client = contentful.createClient({
     *   accessToken: '<content_management_api_key>'
     * })
     * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
     * .then((environmentTemplate) => environmentTemplate.getVersions())
     * .then((environmentTemplateVersions) => console.log(environmentTemplateVersions.items))
     * .catch(console.error)
     * ```
     */
    getVersions: function getEnvironmentTemplateVersions() {
      const raw = this.toPlainObject();
      return makeRequest({
        entityType: 'EnvironmentTemplate',
        action: 'versions',
        params: {
          organizationId,
          environmentTemplateId: raw.sys.id
        }
      }).then(data => wrapEnvironmentTemplateCollection(makeRequest, data, organizationId));
    },
    /**
     * Gets a collection of all installations for the environment template
     * @param [installationParams.spaceId] - Space ID to filter installations by space and environment
     * @param [installationParams.environmentId] - Environment ID to filter installations by space and environment
     * @return Promise for a collection of EnvironmentTemplateInstallations
     * ```javascript
     * const contentful = require('contentful-management')
     *
     * const client = contentful.createClient({
     *   accessToken: '<content_management_api_key>'
     * })
     *
     * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
     * .then((environmentTemplate) => environmentTemplate.getInstallations())
     * .then((environmentTemplateInstallations) =>
     *   console.log(environmentTemplateInstallations.items)
     * )
     * .catch(console.error)
     * ```
     */
    getInstallations: function getEnvironmentTemplateInstallations(_ref = {}) {
      let spaceId = _ref.spaceId,
        environmentId = _ref.environmentId,
        query = _objectWithoutProperties(_ref, _excluded);
      const raw = this.toPlainObject();
      return makeRequest({
        entityType: 'EnvironmentTemplateInstallation',
        action: 'getMany',
        params: {
          organizationId,
          environmentTemplateId: raw.sys.id,
          query: _objectSpread({}, createRequestConfig({
            query
          }).params),
          spaceId,
          environmentId
        }
      }).then(data => wrapEnvironmentTemplateInstallationCollection(makeRequest, data));
    },
    /**
     * Validates an environment template against a given space and environment
     * @param params.spaceId - Space ID where the template should be installed into
     * @param params.environmentId - Environment ID where the template should be installed into
     * @param [params.version] - Version of the template
     * @param [params.installation.takeover] - Already existing Content types to takeover in the target environment
     * @param [params.changeSet] - Change set which should be applied
     * @return Promise for a EnvironmentTemplateValidation
     * ```javascript
     * const contentful = require('contentful-management')
     *
     * const client = contentful.createClient({
     *   accessToken: '<content_management_api_key>'
     * })
     *
     * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
     * .then((environmentTemplate) => environmentTemplate.validate({
     *   spaceId: '<space_id>',
     *   environmentId: '<environment_id>',
     *   version: <version>,
     * }))
     * .then((validationResult) => console.log(validationResult))
     * .catch(console.error)
     * ```
     */
    validate: function validateEnvironmentTemplate({
      spaceId,
      environmentId,
      version,
      takeover,
      changeSet
    }) {
      const raw = this.toPlainObject();
      return makeRequest({
        entityType: 'EnvironmentTemplate',
        action: 'validate',
        params: {
          spaceId,
          version,
          environmentId,
          environmentTemplateId: raw.sys.id
        },
        payload: _objectSpread(_objectSpread({}, takeover && {
          takeover
        }), changeSet && {
          changeSet
        })
      });
    },
    /**
     * Installs a template against a given space and environment
     * @param params.spaceId - Space ID where the template should be installed into
     * @param params.environmentId - Environment ID where the template should be installed into
     * @param params.installation.version- Template version which should be installed
     * @param [params.installation.takeover] - Already existing Content types tp takeover in the target environment
     * @param [params.changeSet] - Change set which should be applied
     * @return Promise for a EnvironmentTemplateInstallation
     * ```javascript
     * const contentful = require('contentful-management')
     *
     * const client = contentful.createClient({
     *   accessToken: '<content_management_api_key>'
     * })
     *
     * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
     * .then((environmentTemplate) => environmentTemplate.validate({
     *   spaceId: '<space_id>',
     *   environmentId: '<environment_id>',
     *   installation: {
     *     version: <version>,
     *   }
     * }))
     * .then((installation) => console.log(installation))
     * .catch(console.error)
     * ```
     */
    install: function installEnvironmentTemplate({
      spaceId,
      environmentId,
      installation
    }) {
      const raw = this.toPlainObject();
      return makeRequest({
        entityType: 'EnvironmentTemplate',
        action: 'install',
        params: {
          spaceId,
          environmentId,
          environmentTemplateId: raw.sys.id
        },
        payload: installation
      });
    },
    /**
     * Disconnects the template from a given environment
     * @param params.spaceId - Space ID where the template should be installed into
     * @param params.environmentId - Environment ID where the template should be installed into
     * @return Promise for the disconnection with no data
     * ```javascript
     * const contentful = require('contentful-management')
     *
     * const client = contentful.createClient({
     *   accessToken: '<content_management_api_key>'
     * })
     *
     * client.getEnvironmentTemplate('<organization_id>', '<environment_template_id>')
     * .then(environmentTemplate) => environmentTemplate.disconnected())
     * .then(() => console.log('Template disconnected'))
     * .catch(console.error)
     * ```
     */
    disconnect: function disconnectEnvironmentTemplate({
      spaceId,
      environmentId
    }) {
      const raw = this.toPlainObject();
      return makeRequest({
        entityType: 'EnvironmentTemplate',
        action: 'disconnect',
        params: {
          spaceId,
          environmentId,
          environmentTemplateId: raw.sys.id
        }
      });
    }
  };
}