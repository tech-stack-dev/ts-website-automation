function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import * as raw from './raw';
import { normalizeSelect, normalizeSpaceId } from './utils';
import copy from 'fast-copy';
const getBaseUrl = params => `/spaces/${params.spaceId}/environments/${params.environmentId}/app_installations`;
const getBaseUrlForOrgInstallations = params => `/app_definitions/${params.appDefinitionId}/app_installations`;
export const getAppInstallationUrl = params => getBaseUrl(params) + `/${params.appDefinitionId}`;
export const get = (http, params) => {
  return raw.get(http, getAppInstallationUrl(params), {
    params: normalizeSelect(params.query)
  });
};
export const getMany = (http, params) => {
  return raw.get(http, getBaseUrl(params), {
    params: normalizeSelect(params.query)
  });
};
export const upsert = (http, params, rawData, headers) => {
  const data = copy(rawData);
  return raw.put(http, getAppInstallationUrl(params), data, {
    headers: _objectSpread(_objectSpread({}, headers), params.acceptAllTerms && {
      'X-Contentful-Marketplace': 'i-accept-end-user-license-agreement,i-accept-marketplace-terms-of-service,i-accept-privacy-policy'
    })
  });
};
export const del = (http, params) => {
  return raw.del(http, getAppInstallationUrl(params));
};
export const getForOrganization = (http, params) => {
  return raw.get(http, getBaseUrlForOrgInstallations(params), {
    params: _objectSpread(_objectSpread({}, normalizeSpaceId(normalizeSelect(params.query))), {}, {
      'sys.organization.sys.id[in]': params.organizationId
    })
  });
};