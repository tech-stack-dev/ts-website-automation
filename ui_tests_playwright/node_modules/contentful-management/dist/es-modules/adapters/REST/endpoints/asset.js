const _excluded = ["asset", "locale", "options"],
  _excluded2 = ["asset", "options"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { errorHandler } from 'contentful-sdk-core';
import copy from 'fast-copy';
import { getUploadHttpClient } from '../../../upload-http-client';
import * as raw from './raw';
import { create as createUpload } from './upload';
import { normalizeSelect } from './utils';
export const get = (http, params, rawData, headers) => {
  return raw.get(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`, {
    params: normalizeSelect(params.query),
    headers: headers ? _objectSpread({}, headers) : undefined
  });
};
export const getMany = (http, params, rawData, headers) => {
  return raw.get(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets`, {
    params: normalizeSelect(params.query),
    headers: headers ? _objectSpread({}, headers) : undefined
  });
};
export const update = (http, params, rawData, headers) => {
  var _rawData$sys$version;
  const data = copy(rawData);
  delete data.sys;
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`, data, {
    headers: _objectSpread({
      'X-Contentful-Version': (_rawData$sys$version = rawData.sys.version) !== null && _rawData$sys$version !== void 0 ? _rawData$sys$version : 0
    }, headers)
  });
};
export const del = (http, params) => {
  return raw.del(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`);
};
export const publish = (http, params, rawData) => {
  var _rawData$sys$version2;
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/published`, null, {
    headers: {
      'X-Contentful-Version': (_rawData$sys$version2 = rawData.sys.version) !== null && _rawData$sys$version2 !== void 0 ? _rawData$sys$version2 : 0
    }
  });
};
export const unpublish = (http, params) => {
  return raw.del(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/published`);
};
export const archive = (http, params) => {
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/archived`);
};
export const unarchive = (http, params) => {
  return raw.del(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}/archived`);
};
export const create = (http, params, rawData) => {
  const data = copy(rawData);
  return raw.post(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets`, data);
};
export const createWithId = (http, params, rawData) => {
  const data = copy(rawData);
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${params.assetId}`, data);
};
export const createFromFiles = (http, params, data) => {
  const httpUpload = getUploadHttpClient(http, {
    uploadTimeout: params.uploadTimeout
  });
  const file = data.fields.file;
  return Promise.all(Object.keys(file).map(locale => {
    const _file$locale = file[locale],
      contentType = _file$locale.contentType,
      fileName = _file$locale.fileName;
    return createUpload(httpUpload, params, file[locale]).then(upload => {
      return {
        [locale]: {
          contentType,
          fileName,
          uploadFrom: {
            sys: {
              type: 'Link',
              linkType: 'Upload',
              id: upload.sys.id
            }
          }
        }
      };
    });
  })).then(uploads => {
    const file = uploads.reduce((fieldsData, upload) => _objectSpread(_objectSpread({}, fieldsData), upload), {});
    const asset = _objectSpread(_objectSpread({}, data), {}, {
      fields: _objectSpread(_objectSpread({}, data.fields), {}, {
        file
      })
    });
    return create(http, params, asset);
  }).catch(errorHandler);
};

/**
 * Asset processing
 */

const ASSET_PROCESSING_CHECK_WAIT = 3000;
const ASSET_PROCESSING_CHECK_RETRIES = 10;
function checkIfAssetHasUrl(http, params, {
  resolve,
  reject,
  locale,
  processingCheckWait = ASSET_PROCESSING_CHECK_WAIT,
  processingCheckRetries = ASSET_PROCESSING_CHECK_RETRIES,
  checkCount = 0
}) {
  return get(http, params).then(asset => {
    if (asset.fields.file[locale].url) {
      resolve(asset);
    } else if (checkCount === processingCheckRetries) {
      const error = new Error();
      error.name = 'AssetProcessingTimeout';
      error.message = 'Asset is taking longer then expected to process.';
      reject(error);
    } else {
      checkCount++;
      setTimeout(() => checkIfAssetHasUrl(http, params, {
        resolve: resolve,
        reject: reject,
        locale: locale,
        checkCount: checkCount,
        processingCheckWait,
        processingCheckRetries
      }), processingCheckWait);
    }
  });
}
export const processForLocale = (http, _ref) => {
  let asset = _ref.asset,
    locale = _ref.locale,
    _ref$options = _ref.options,
    _ref$options2 = _ref$options === void 0 ? {} : _ref$options,
    processingCheckRetries = _ref$options2.processingCheckRetries,
    processingCheckWait = _ref$options2.processingCheckWait,
    params = _objectWithoutProperties(_ref, _excluded);
  return raw.put(http, `/spaces/${params.spaceId}/environments/${params.environmentId}/assets/${asset.sys.id}/files/${locale}/process`, null, {
    headers: {
      'X-Contentful-Version': asset.sys.version
    }
  }).then(() => {
    return new Promise((resolve, reject) => checkIfAssetHasUrl(http, {
      spaceId: params.spaceId,
      environmentId: params.environmentId,
      assetId: asset.sys.id
    }, {
      resolve,
      reject,
      locale,
      processingCheckWait,
      processingCheckRetries
    }));
  });
};
export const processForAllLocales = (http, _ref2) => {
  let asset = _ref2.asset,
    _ref2$options = _ref2.options,
    options = _ref2$options === void 0 ? {} : _ref2$options,
    params = _objectWithoutProperties(_ref2, _excluded2);
  const locales = Object.keys(asset.fields.file || {});
  let mostUpToDateAssetVersion = asset;

  // Let all the locales process
  // Since they all resolve at different times,
  // we need to pick the last resolved value
  // to reflect the most recent state
  const allProcessingLocales = locales.map(locale => processForLocale(http, _objectSpread(_objectSpread({}, params), {}, {
    asset,
    locale,
    options
  })).then(result => {
    // Side effect of always setting the most up to date asset version
    // The last one to call this will be the last one that finished
    // and thus the most up to date
    mostUpToDateAssetVersion = result;
  }));
  return Promise.all(allProcessingLocales).then(() => mostUpToDateAssetVersion);
};