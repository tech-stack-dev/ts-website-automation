function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import copy from 'fast-copy';
import * as raw from './raw';
const getBaseUrl = params => `/spaces/${params.spaceId}/team_space_memberships`;
const getEntityUrl = params => `${getBaseUrl(params)}/${params.teamSpaceMembershipId}`;
export const get = (http, params) => raw.get(http, getEntityUrl(params));
export const getMany = (http, params) => raw.get(http, getBaseUrl(params), {
  params: params.query
});
export const getForOrganization = (http, params) => {
  return raw.get(http, `/organizations/${params.organizationId}/team_space_memberships/${params.teamSpaceMembershipId}`);
};
export const getManyForOrganization = (http, params) => {
  const query = params.query || {};
  if (params.teamId) {
    query['sys.team.sys.id'] = params.teamId;
  }
  return raw.get(http, `/organizations/${params.organizationId}/team_space_memberships`, {
    params: params.query
  });
};
export const create = (http, params, rawData, headers) => {
  return raw.post(http, getBaseUrl(params), rawData, {
    headers: _objectSpread({
      'x-contentful-team': params.teamId
    }, headers)
  });
};
export const update = (http, params, rawData, headers) => {
  const data = copy(rawData);
  delete data.sys;
  return raw.put(http, getEntityUrl(params), data, {
    headers: _objectSpread({
      'X-Contentful-Version': rawData.sys.version || 0,
      'x-contentful-team': rawData.sys.team.sys.id
    }, headers)
  });
};
export const del = (http, params) => {
  return raw.del(http, getEntityUrl(params));
};