import copy from 'fast-copy';
import * as raw from './raw';
const apiPath = (organizationId, ...pathSegments) => `/organizations/${organizationId}/environment_templates/` + pathSegments.join('/');
export const get = (http, {
  organizationId,
  environmentTemplateId,
  version
}) => version ? raw.get(http, apiPath(organizationId, environmentTemplateId, 'versions', version)) : raw.get(http, apiPath(organizationId, environmentTemplateId));
export const getMany = (http, {
  organizationId,
  query = {}
}) => raw.get(http, apiPath(organizationId), {
  params: query
});
export const create = (http, {
  organizationId
}, payload) => raw.post(http, apiPath(organizationId), payload);
export const update = (http, {
  organizationId,
  environmentTemplateId
}, payload) => {
  var _payload$sys$version;
  const data = copy(payload);
  delete data.sys;
  return raw.put(http, apiPath(organizationId, environmentTemplateId), data, {
    headers: {
      'X-Contentful-Version': (_payload$sys$version = payload.sys.version) !== null && _payload$sys$version !== void 0 ? _payload$sys$version : 0
    }
  });
};
export const versionUpdate = (http, {
  organizationId,
  version,
  environmentTemplateId
}, payload) => raw.patch(http, apiPath(organizationId, environmentTemplateId, 'versions', version), payload);
export const del = (http, {
  organizationId,
  environmentTemplateId
}) => raw.del(http, apiPath(organizationId, environmentTemplateId));
export const versions = (http, {
  organizationId,
  environmentTemplateId,
  query = {}
}) => raw.get(http, apiPath(organizationId, environmentTemplateId, 'versions'), {
  params: query
});
export const validate = (http, {
  spaceId,
  environmentId,
  environmentTemplateId,
  version
}, payload) => raw.put(http, version ? `/spaces/${spaceId}/environments/${environmentId}/template_installations/${environmentTemplateId}/versions/${version}/validated` : `/spaces/${spaceId}/environments/${environmentId}/template_installations/${environmentTemplateId}/validated`, payload);
export const install = (http, {
  spaceId,
  environmentId,
  environmentTemplateId
}, payload) => raw.post(http, `/spaces/${spaceId}/environments/${environmentId}/template_installations/${environmentTemplateId}/versions`, payload);
export const disconnect = (http, {
  spaceId,
  environmentId,
  environmentTemplateId
}) => raw.del(http, `/spaces/${spaceId}/environments/${environmentId}/template_installations/${environmentTemplateId}`);