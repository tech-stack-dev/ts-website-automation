function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import axios from 'axios';
import { createHttpClient } from 'contentful-sdk-core';
import copy from 'fast-copy';
import endpoints from './endpoints';
/**
 * @private
 */
const defaultHostParameters = {
  defaultHostname: 'api.contentful.com',
  defaultHostnameUpload: 'upload.contentful.com'
};
export class RestAdapter {
  constructor(params) {
    _defineProperty(this, "params", void 0);
    if (!params.accessToken) {
      throw new TypeError('Expected parameter accessToken');
    }
    this.params = _objectSpread(_objectSpread({}, defaultHostParameters), copy(params));
  }
  makeRequest({
    entityType,
    action: actionInput,
    params,
    payload,
    headers,
    userAgent
  }) {
    var _this = this;
    return _asyncToGenerator(function* () {
      var _endpoints$entityType;
      // `delete` is a reserved keyword. Therefore, the methods are called `del`.
      const action = actionInput === 'delete' ? 'del' : actionInput;
      const endpoint = // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      (_endpoints$entityType = endpoints[entityType]) === null || _endpoints$entityType === void 0 ? void 0 : _endpoints$entityType[action];
      if (endpoint === undefined) {
        throw new Error('Unknown endpoint');
      }
      const requiredHeaders = {
        'Content-Type': 'application/vnd.contentful.management.v1+json',
        'X-Contentful-User-Agent': userAgent
      };

      // TODO: maybe we can avoid creating a new axios instance for each request
      const axiosInstance = createHttpClient(axios, _objectSpread(_objectSpread({}, _this.params), {}, {
        headers: _objectSpread(_objectSpread({}, requiredHeaders), _this.params.headers)
      }));
      return yield endpoint(axiosInstance, params, payload, headers);
    })();
  }
}