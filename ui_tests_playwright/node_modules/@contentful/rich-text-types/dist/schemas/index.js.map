{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/schemas/index.ts"],"names":[],"mappings":";;;AAqCA,SAAgB,qBAAqB,CAAC,QAAgB;IACpD,IAAI;QACF,OAAO,OAAO,CAAC,sBAAe,QAAQ,UAAO,CAAC,CAAC;KAChD;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,gCAAwB,QAAQ,sBAAkB,CAAC,CAAC;KACrE;AACH,CAAC;AAND,sDAMC","sourcesContent":["export declare type PrimitiveType = number | boolean | string | null;\nexport declare type Definition = {\n  $ref?: string;\n  $schema?: string;\n  $id?: string;\n  description?: string;\n  allOf?: Definition[];\n  oneOf?: Definition[];\n  anyOf?: Definition[];\n  title?: string;\n  type?: string | string[];\n  definitions?: {\n    [key: string]: any;\n  };\n  format?: string;\n  items?: Definition | Definition[];\n  minItems?: number;\n  additionalItems?:\n    | {\n        anyOf: Definition[];\n      }\n    | Definition;\n  enum?: PrimitiveType[] | Definition[];\n  default?: PrimitiveType | Object;\n  additionalProperties?: Definition | boolean;\n  required?: string[];\n  propertyOrder?: string[];\n  properties?: {\n    [key: string]: any;\n  };\n  defaultProperties?: string[];\n  patternProperties?: {\n    [pattern: string]: Definition;\n  };\n  typeof?: 'function';\n};\n\nexport function getSchemaWithNodeType(nodeType: string): Definition {\n  try {\n    return require(`./generated/${nodeType}.json`);\n  } catch (error) {\n    throw new Error(`Schema for nodeType \"${nodeType}\" was not found.`);\n  }\n}\n"]}