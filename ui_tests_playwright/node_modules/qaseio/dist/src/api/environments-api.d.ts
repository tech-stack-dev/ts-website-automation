/**
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { EnvironmentCreate } from '../model';
import { EnvironmentListResponse } from '../model';
import { EnvironmentResponse } from '../model';
import { EnvironmentUpdate } from '../model';
import { IdResponse } from '../model';
/**
 * EnvironmentsApi - axios parameter creator
 * @export
 */
export declare const EnvironmentsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * This method allows to create an environment in selected project.
     * @summary Create a new environment.
     * @param {string} code Code of project, where to search entities.
     * @param {EnvironmentCreate} environmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnvironment: (code: string, environmentCreate: EnvironmentCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method completely deletes an environment from repository.
     * @summary Delete environment.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve a specific environment.
     * @summary Get a specific environment.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve all environments stored in selected project.
     * @summary Get all environments.
     * @param {string} code Code of project, where to search entities.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironments: (code: string, limit?: number | undefined, offset?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method updates an environment.
     * @summary Update environment.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {EnvironmentUpdate} environmentUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnvironment: (code: string, id: number, environmentUpdate: EnvironmentUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EnvironmentsApi - functional programming interface
 * @export
 */
export declare const EnvironmentsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * This method allows to create an environment in selected project.
     * @summary Create a new environment.
     * @param {string} code Code of project, where to search entities.
     * @param {EnvironmentCreate} environmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnvironment(code: string, environmentCreate: EnvironmentCreate, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdResponse>>;
    /**
     * This method completely deletes an environment from repository.
     * @summary Delete environment.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment(code: string, id: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdResponse>>;
    /**
     * This method allows to retrieve a specific environment.
     * @summary Get a specific environment.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment(code: string, id: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<EnvironmentResponse>>;
    /**
     * This method allows to retrieve all environments stored in selected project.
     * @summary Get all environments.
     * @param {string} code Code of project, where to search entities.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironments(code: string, limit?: number | undefined, offset?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<EnvironmentListResponse>>;
    /**
     * This method updates an environment.
     * @summary Update environment.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {EnvironmentUpdate} environmentUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnvironment(code: string, id: number, environmentUpdate: EnvironmentUpdate, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdResponse>>;
};
/**
 * EnvironmentsApi - factory interface
 * @export
 */
export declare const EnvironmentsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * This method allows to create an environment in selected project.
     * @summary Create a new environment.
     * @param {string} code Code of project, where to search entities.
     * @param {EnvironmentCreate} environmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnvironment(code: string, environmentCreate: EnvironmentCreate, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method completely deletes an environment from repository.
     * @summary Delete environment.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment(code: string, id: number, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method allows to retrieve a specific environment.
     * @summary Get a specific environment.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment(code: string, id: number, options?: any): AxiosPromise<EnvironmentResponse>;
    /**
     * This method allows to retrieve all environments stored in selected project.
     * @summary Get all environments.
     * @param {string} code Code of project, where to search entities.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironments(code: string, limit?: number | undefined, offset?: number | undefined, options?: any): AxiosPromise<EnvironmentListResponse>;
    /**
     * This method updates an environment.
     * @summary Update environment.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {EnvironmentUpdate} environmentUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnvironment(code: string, id: number, environmentUpdate: EnvironmentUpdate, options?: any): AxiosPromise<IdResponse>;
};
/**
 * EnvironmentsApi - object-oriented interface
 * @export
 * @class EnvironmentsApi
 * @extends {BaseAPI}
 */
export declare class EnvironmentsApi extends BaseAPI {
    /**
     * This method allows to create an environment in selected project.
     * @summary Create a new environment.
     * @param {string} code Code of project, where to search entities.
     * @param {EnvironmentCreate} environmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    createEnvironment(code: string, environmentCreate: EnvironmentCreate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method completely deletes an environment from repository.
     * @summary Delete environment.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    deleteEnvironment(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method allows to retrieve a specific environment.
     * @summary Get a specific environment.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    getEnvironment(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EnvironmentResponse, any>>;
    /**
     * This method allows to retrieve all environments stored in selected project.
     * @summary Get all environments.
     * @param {string} code Code of project, where to search entities.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    getEnvironments(code: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EnvironmentListResponse, any>>;
    /**
     * This method updates an environment.
     * @summary Update environment.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {EnvironmentUpdate} environmentUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    updateEnvironment(code: string, id: number, environmentUpdate: EnvironmentUpdate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
}
