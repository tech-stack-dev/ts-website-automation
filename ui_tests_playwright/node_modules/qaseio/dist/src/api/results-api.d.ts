/**
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { HashResponse } from '../model';
import { Response } from '../model';
import { ResultCreate } from '../model';
import { ResultCreateBulk } from '../model';
import { ResultListResponse } from '../model';
import { ResultResponse } from '../model';
import { ResultUpdate } from '../model';
/**
 * ResultsApi - axios parameter creator
 * @export
 */
export declare const ResultsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * This method allows to create test run result by Run Id.
     * @summary Create test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {ResultCreate} resultCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResult: (code: string, id: number, resultCreate: ResultCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to create a lot of test run result at once.
     * @summary Bulk create test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {ResultCreateBulk} resultCreateBulk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResultBulk: (code: string, id: number, resultCreateBulk: ResultCreateBulk, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to delete test run result.
     * @summary Delete test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} hash Hash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResult: (code: string, id: number, hash: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve a specific test run result by Hash.
     * @summary Get test run result by code.
     * @param {string} code Code of project, where to search entities.
     * @param {string} hash Hash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResult: (code: string, hash: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve all test run results stored in selected project.
     * @summary Get all test run results.
     * @param {string} code Code of project, where to search entities.
     * @param {object} [filters]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResults: (code: string, filters?: object | undefined, limit?: number | undefined, offset?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to update test run result.
     * @summary Update test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} hash Hash.
     * @param {ResultUpdate} resultUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResult: (code: string, id: number, hash: string, resultUpdate: ResultUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ResultsApi - functional programming interface
 * @export
 */
export declare const ResultsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * This method allows to create test run result by Run Id.
     * @summary Create test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {ResultCreate} resultCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResult(code: string, id: number, resultCreate: ResultCreate, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response & object>>;
    /**
     * This method allows to create a lot of test run result at once.
     * @summary Bulk create test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {ResultCreateBulk} resultCreateBulk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResultBulk(code: string, id: number, resultCreateBulk: ResultCreateBulk, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>>;
    /**
     * This method allows to delete test run result.
     * @summary Delete test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} hash Hash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResult(code: string, id: number, hash: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HashResponse>>;
    /**
     * This method allows to retrieve a specific test run result by Hash.
     * @summary Get test run result by code.
     * @param {string} code Code of project, where to search entities.
     * @param {string} hash Hash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResult(code: string, hash: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultResponse>>;
    /**
     * This method allows to retrieve all test run results stored in selected project.
     * @summary Get all test run results.
     * @param {string} code Code of project, where to search entities.
     * @param {object} [filters]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResults(code: string, filters?: object | undefined, limit?: number | undefined, offset?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultListResponse>>;
    /**
     * This method allows to update test run result.
     * @summary Update test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} hash Hash.
     * @param {ResultUpdate} resultUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResult(code: string, id: number, hash: string, resultUpdate: ResultUpdate, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HashResponse>>;
};
/**
 * ResultsApi - factory interface
 * @export
 */
export declare const ResultsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * This method allows to create test run result by Run Id.
     * @summary Create test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {ResultCreate} resultCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResult(code: string, id: number, resultCreate: ResultCreate, options?: any): AxiosPromise<Response & object>;
    /**
     * This method allows to create a lot of test run result at once.
     * @summary Bulk create test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {ResultCreateBulk} resultCreateBulk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResultBulk(code: string, id: number, resultCreateBulk: ResultCreateBulk, options?: any): AxiosPromise<Response>;
    /**
     * This method allows to delete test run result.
     * @summary Delete test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} hash Hash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResult(code: string, id: number, hash: string, options?: any): AxiosPromise<HashResponse>;
    /**
     * This method allows to retrieve a specific test run result by Hash.
     * @summary Get test run result by code.
     * @param {string} code Code of project, where to search entities.
     * @param {string} hash Hash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResult(code: string, hash: string, options?: any): AxiosPromise<ResultResponse>;
    /**
     * This method allows to retrieve all test run results stored in selected project.
     * @summary Get all test run results.
     * @param {string} code Code of project, where to search entities.
     * @param {object} [filters]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResults(code: string, filters?: object | undefined, limit?: number | undefined, offset?: number | undefined, options?: any): AxiosPromise<ResultListResponse>;
    /**
     * This method allows to update test run result.
     * @summary Update test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} hash Hash.
     * @param {ResultUpdate} resultUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResult(code: string, id: number, hash: string, resultUpdate: ResultUpdate, options?: any): AxiosPromise<HashResponse>;
};
/**
 * ResultsApi - object-oriented interface
 * @export
 * @class ResultsApi
 * @extends {BaseAPI}
 */
export declare class ResultsApi extends BaseAPI {
    /**
     * This method allows to create test run result by Run Id.
     * @summary Create test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {ResultCreate} resultCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    createResult(code: string, id: number, resultCreate: ResultCreate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Response & object, any>>;
    /**
     * This method allows to create a lot of test run result at once.
     * @summary Bulk create test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {ResultCreateBulk} resultCreateBulk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    createResultBulk(code: string, id: number, resultCreateBulk: ResultCreateBulk, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Response, any>>;
    /**
     * This method allows to delete test run result.
     * @summary Delete test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} hash Hash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    deleteResult(code: string, id: number, hash: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HashResponse, any>>;
    /**
     * This method allows to retrieve a specific test run result by Hash.
     * @summary Get test run result by code.
     * @param {string} code Code of project, where to search entities.
     * @param {string} hash Hash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    getResult(code: string, hash: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultResponse, any>>;
    /**
     * This method allows to retrieve all test run results stored in selected project.
     * @summary Get all test run results.
     * @param {string} code Code of project, where to search entities.
     * @param {object} [filters]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    getResults(code: string, filters?: object, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultListResponse, any>>;
    /**
     * This method allows to update test run result.
     * @summary Update test run result.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} hash Hash.
     * @param {ResultUpdate} resultUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    updateResult(code: string, id: number, hash: string, resultUpdate: ResultUpdate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HashResponse, any>>;
}
