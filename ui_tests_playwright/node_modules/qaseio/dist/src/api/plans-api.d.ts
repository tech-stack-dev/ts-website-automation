/**
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { IdResponse } from '../model';
import { PlanCreate } from '../model';
import { PlanListResponse } from '../model';
import { PlanResponse } from '../model';
import { PlanUpdate } from '../model';
/**
 * PlansApi - axios parameter creator
 * @export
 */
export declare const PlansApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * This method allows to create a plan in selected project.
     * @summary Create a new plan.
     * @param {string} code Code of project, where to search entities.
     * @param {PlanCreate} planCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPlan: (code: string, planCreate: PlanCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method completely deletes a plan from repository.
     * @summary Delete plan.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePlan: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve a specific plan.
     * @summary Get a specific plan.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlan: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve all plans stored in selected project.
     * @summary Get all plans.
     * @param {string} code Code of project, where to search entities.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlans: (code: string, limit?: number | undefined, offset?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method updates a plan.
     * @summary Update plan.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {PlanUpdate} planUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePlan: (code: string, id: number, planUpdate: PlanUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PlansApi - functional programming interface
 * @export
 */
export declare const PlansApiFp: (configuration?: Configuration | undefined) => {
    /**
     * This method allows to create a plan in selected project.
     * @summary Create a new plan.
     * @param {string} code Code of project, where to search entities.
     * @param {PlanCreate} planCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPlan(code: string, planCreate: PlanCreate, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdResponse>>;
    /**
     * This method completely deletes a plan from repository.
     * @summary Delete plan.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePlan(code: string, id: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdResponse>>;
    /**
     * This method allows to retrieve a specific plan.
     * @summary Get a specific plan.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlan(code: string, id: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PlanResponse>>;
    /**
     * This method allows to retrieve all plans stored in selected project.
     * @summary Get all plans.
     * @param {string} code Code of project, where to search entities.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlans(code: string, limit?: number | undefined, offset?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PlanListResponse>>;
    /**
     * This method updates a plan.
     * @summary Update plan.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {PlanUpdate} planUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePlan(code: string, id: number, planUpdate: PlanUpdate, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdResponse>>;
};
/**
 * PlansApi - factory interface
 * @export
 */
export declare const PlansApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * This method allows to create a plan in selected project.
     * @summary Create a new plan.
     * @param {string} code Code of project, where to search entities.
     * @param {PlanCreate} planCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPlan(code: string, planCreate: PlanCreate, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method completely deletes a plan from repository.
     * @summary Delete plan.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePlan(code: string, id: number, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method allows to retrieve a specific plan.
     * @summary Get a specific plan.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlan(code: string, id: number, options?: any): AxiosPromise<PlanResponse>;
    /**
     * This method allows to retrieve all plans stored in selected project.
     * @summary Get all plans.
     * @param {string} code Code of project, where to search entities.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlans(code: string, limit?: number | undefined, offset?: number | undefined, options?: any): AxiosPromise<PlanListResponse>;
    /**
     * This method updates a plan.
     * @summary Update plan.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {PlanUpdate} planUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePlan(code: string, id: number, planUpdate: PlanUpdate, options?: any): AxiosPromise<IdResponse>;
};
/**
 * PlansApi - object-oriented interface
 * @export
 * @class PlansApi
 * @extends {BaseAPI}
 */
export declare class PlansApi extends BaseAPI {
    /**
     * This method allows to create a plan in selected project.
     * @summary Create a new plan.
     * @param {string} code Code of project, where to search entities.
     * @param {PlanCreate} planCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApi
     */
    createPlan(code: string, planCreate: PlanCreate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method completely deletes a plan from repository.
     * @summary Delete plan.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApi
     */
    deletePlan(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method allows to retrieve a specific plan.
     * @summary Get a specific plan.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApi
     */
    getPlan(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanResponse, any>>;
    /**
     * This method allows to retrieve all plans stored in selected project.
     * @summary Get all plans.
     * @param {string} code Code of project, where to search entities.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApi
     */
    getPlans(code: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanListResponse, any>>;
    /**
     * This method updates a plan.
     * @summary Update plan.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {PlanUpdate} planUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApi
     */
    updatePlan(code: string, id: number, planUpdate: PlanUpdate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
}
