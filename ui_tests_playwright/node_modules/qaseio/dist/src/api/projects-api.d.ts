/**
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ProjectAccess } from '../model';
import { ProjectCodeResponse } from '../model';
import { ProjectCreate } from '../model';
import { ProjectListResponse } from '../model';
import { ProjectResponse } from '../model';
import { Response } from '../model';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export declare const ProjectsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * This method is used to create a new project through API.
     * @summary Create new project.
     * @param {ProjectCreate} projectCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject: (projectCreate: ProjectCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to delete a specific project.
     * @summary Delete Project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject: (code: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve a specific project.
     * @summary Get Project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject: (code: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve all projects available for your account. You can limit and offset params to paginate.
     * @summary Get All Projects.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjects: (limit?: number | undefined, offset?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to grant access to a specific project.
     * @summary Grant access to project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {ProjectAccess} projectAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    grantAccessToProject: (code: string, projectAccess: ProjectAccess, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to revoke access to a specific project.
     * @summary Revoke access to project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {ProjectAccess} projectAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeAccessToProject: (code: string, projectAccess: ProjectAccess, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProjectsApi - functional programming interface
 * @export
 */
export declare const ProjectsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * This method is used to create a new project through API.
     * @summary Create new project.
     * @param {ProjectCreate} projectCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(projectCreate: ProjectCreate, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ProjectCodeResponse>>;
    /**
     * This method allows to delete a specific project.
     * @summary Delete Project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(code: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>>;
    /**
     * This method allows to retrieve a specific project.
     * @summary Get Project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(code: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ProjectResponse>>;
    /**
     * This method allows to retrieve all projects available for your account. You can limit and offset params to paginate.
     * @summary Get All Projects.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjects(limit?: number | undefined, offset?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ProjectListResponse>>;
    /**
     * This method allows to grant access to a specific project.
     * @summary Grant access to project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {ProjectAccess} projectAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    grantAccessToProject(code: string, projectAccess: ProjectAccess, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>>;
    /**
     * This method allows to revoke access to a specific project.
     * @summary Revoke access to project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {ProjectAccess} projectAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeAccessToProject(code: string, projectAccess: ProjectAccess, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>>;
};
/**
 * ProjectsApi - factory interface
 * @export
 */
export declare const ProjectsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * This method is used to create a new project through API.
     * @summary Create new project.
     * @param {ProjectCreate} projectCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(projectCreate: ProjectCreate, options?: any): AxiosPromise<ProjectCodeResponse>;
    /**
     * This method allows to delete a specific project.
     * @summary Delete Project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(code: string, options?: any): AxiosPromise<Response>;
    /**
     * This method allows to retrieve a specific project.
     * @summary Get Project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(code: string, options?: any): AxiosPromise<ProjectResponse>;
    /**
     * This method allows to retrieve all projects available for your account. You can limit and offset params to paginate.
     * @summary Get All Projects.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjects(limit?: number | undefined, offset?: number | undefined, options?: any): AxiosPromise<ProjectListResponse>;
    /**
     * This method allows to grant access to a specific project.
     * @summary Grant access to project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {ProjectAccess} projectAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    grantAccessToProject(code: string, projectAccess: ProjectAccess, options?: any): AxiosPromise<Response>;
    /**
     * This method allows to revoke access to a specific project.
     * @summary Revoke access to project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {ProjectAccess} projectAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeAccessToProject(code: string, projectAccess: ProjectAccess, options?: any): AxiosPromise<Response>;
};
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export declare class ProjectsApi extends BaseAPI {
    /**
     * This method is used to create a new project through API.
     * @summary Create new project.
     * @param {ProjectCreate} projectCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    createProject(projectCreate: ProjectCreate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectCodeResponse, any>>;
    /**
     * This method allows to delete a specific project.
     * @summary Delete Project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    deleteProject(code: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Response, any>>;
    /**
     * This method allows to retrieve a specific project.
     * @summary Get Project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProject(code: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectResponse, any>>;
    /**
     * This method allows to retrieve all projects available for your account. You can limit and offset params to paginate.
     * @summary Get All Projects.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProjects(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectListResponse, any>>;
    /**
     * This method allows to grant access to a specific project.
     * @summary Grant access to project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {ProjectAccess} projectAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    grantAccessToProject(code: string, projectAccess: ProjectAccess, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Response, any>>;
    /**
     * This method allows to revoke access to a specific project.
     * @summary Revoke access to project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {ProjectAccess} projectAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    revokeAccessToProject(code: string, projectAccess: ProjectAccess, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Response, any>>;
}
