/**
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { IdResponse } from '../model';
import { TestCaseCreate } from '../model';
import { TestCaseListResponse } from '../model';
import { TestCaseResponse } from '../model';
import { TestCaseUpdate } from '../model';
/**
 * CasesApi - axios parameter creator
 * @export
 */
export declare const CasesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * This method allows to create a new test case in selected project.
     * @summary Create a new test case.
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseCreate} testCaseCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCase: (code: string, testCaseCreate: TestCaseCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method completely deletes a test case from repository.
     * @summary Delete test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCase: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve a specific test case.
     * @summary Get a specific test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCase: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve all test cases stored in selected project.
     * @summary Get all test cases.
     * @param {string} code Code of project, where to search entities.
     * @param {object} [filters]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCases: (code: string, filters?: object | undefined, limit?: number | undefined, offset?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method updates a test case.
     * @summary Update test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {TestCaseUpdate} testCaseUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCase: (code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CasesApi - functional programming interface
 * @export
 */
export declare const CasesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * This method allows to create a new test case in selected project.
     * @summary Create a new test case.
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseCreate} testCaseCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCase(code: string, testCaseCreate: TestCaseCreate, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdResponse>>;
    /**
     * This method completely deletes a test case from repository.
     * @summary Delete test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCase(code: string, id: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdResponse>>;
    /**
     * This method allows to retrieve a specific test case.
     * @summary Get a specific test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCase(code: string, id: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TestCaseResponse>>;
    /**
     * This method allows to retrieve all test cases stored in selected project.
     * @summary Get all test cases.
     * @param {string} code Code of project, where to search entities.
     * @param {object} [filters]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCases(code: string, filters?: object | undefined, limit?: number | undefined, offset?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TestCaseListResponse>>;
    /**
     * This method updates a test case.
     * @summary Update test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {TestCaseUpdate} testCaseUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCase(code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdResponse>>;
};
/**
 * CasesApi - factory interface
 * @export
 */
export declare const CasesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * This method allows to create a new test case in selected project.
     * @summary Create a new test case.
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseCreate} testCaseCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCase(code: string, testCaseCreate: TestCaseCreate, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method completely deletes a test case from repository.
     * @summary Delete test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCase(code: string, id: number, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method allows to retrieve a specific test case.
     * @summary Get a specific test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCase(code: string, id: number, options?: any): AxiosPromise<TestCaseResponse>;
    /**
     * This method allows to retrieve all test cases stored in selected project.
     * @summary Get all test cases.
     * @param {string} code Code of project, where to search entities.
     * @param {object} [filters]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCases(code: string, filters?: object | undefined, limit?: number | undefined, offset?: number | undefined, options?: any): AxiosPromise<TestCaseListResponse>;
    /**
     * This method updates a test case.
     * @summary Update test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {TestCaseUpdate} testCaseUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCase(code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: any): AxiosPromise<IdResponse>;
};
/**
 * CasesApi - object-oriented interface
 * @export
 * @class CasesApi
 * @extends {BaseAPI}
 */
export declare class CasesApi extends BaseAPI {
    /**
     * This method allows to create a new test case in selected project.
     * @summary Create a new test case.
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseCreate} testCaseCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    createCase(code: string, testCaseCreate: TestCaseCreate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method completely deletes a test case from repository.
     * @summary Delete test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    deleteCase(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method allows to retrieve a specific test case.
     * @summary Get a specific test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    getCase(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TestCaseResponse, any>>;
    /**
     * This method allows to retrieve all test cases stored in selected project.
     * @summary Get all test cases.
     * @param {string} code Code of project, where to search entities.
     * @param {object} [filters]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    getCases(code: string, filters?: object, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TestCaseListResponse, any>>;
    /**
     * This method updates a test case.
     * @summary Update test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {TestCaseUpdate} testCaseUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    updateCase(code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
}
