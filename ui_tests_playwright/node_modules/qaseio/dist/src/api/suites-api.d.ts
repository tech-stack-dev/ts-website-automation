/**
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { IdResponse } from '../model';
import { SuiteCreate } from '../model';
import { SuiteDelete } from '../model';
import { SuiteListResponse } from '../model';
import { SuiteResponse } from '../model';
import { SuiteUpdate } from '../model';
/**
 * SuitesApi - axios parameter creator
 * @export
 */
export declare const SuitesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * This method is used to create a new test suite through API.
     * @summary Create a new test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {SuiteCreate} suiteCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSuite: (code: string, suiteCreate: SuiteCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method completely deletes a test suite with test cases from repository.
     * @summary Delete test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {SuiteDelete} [suiteDelete]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSuite: (code: string, id: number, suiteDelete?: SuiteDelete | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve a specific test suite.
     * @summary Get a specific test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSuite: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve all test suites stored in selected project..
     * @summary Get all test suites.
     * @param {string} code Code of project, where to search entities.
     * @param {object} [filters]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSuites: (code: string, filters?: object | undefined, limit?: number | undefined, offset?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method is used to update a test suite through API.
     * @summary Update test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {SuiteUpdate} suiteUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSuite: (code: string, id: number, suiteUpdate: SuiteUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SuitesApi - functional programming interface
 * @export
 */
export declare const SuitesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * This method is used to create a new test suite through API.
     * @summary Create a new test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {SuiteCreate} suiteCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSuite(code: string, suiteCreate: SuiteCreate, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdResponse>>;
    /**
     * This method completely deletes a test suite with test cases from repository.
     * @summary Delete test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {SuiteDelete} [suiteDelete]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSuite(code: string, id: number, suiteDelete?: SuiteDelete | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdResponse>>;
    /**
     * This method allows to retrieve a specific test suite.
     * @summary Get a specific test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSuite(code: string, id: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SuiteResponse>>;
    /**
     * This method allows to retrieve all test suites stored in selected project..
     * @summary Get all test suites.
     * @param {string} code Code of project, where to search entities.
     * @param {object} [filters]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSuites(code: string, filters?: object | undefined, limit?: number | undefined, offset?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SuiteListResponse>>;
    /**
     * This method is used to update a test suite through API.
     * @summary Update test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {SuiteUpdate} suiteUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSuite(code: string, id: number, suiteUpdate: SuiteUpdate, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdResponse>>;
};
/**
 * SuitesApi - factory interface
 * @export
 */
export declare const SuitesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * This method is used to create a new test suite through API.
     * @summary Create a new test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {SuiteCreate} suiteCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSuite(code: string, suiteCreate: SuiteCreate, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method completely deletes a test suite with test cases from repository.
     * @summary Delete test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {SuiteDelete} [suiteDelete]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSuite(code: string, id: number, suiteDelete?: SuiteDelete | undefined, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method allows to retrieve a specific test suite.
     * @summary Get a specific test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSuite(code: string, id: number, options?: any): AxiosPromise<SuiteResponse>;
    /**
     * This method allows to retrieve all test suites stored in selected project..
     * @summary Get all test suites.
     * @param {string} code Code of project, where to search entities.
     * @param {object} [filters]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSuites(code: string, filters?: object | undefined, limit?: number | undefined, offset?: number | undefined, options?: any): AxiosPromise<SuiteListResponse>;
    /**
     * This method is used to update a test suite through API.
     * @summary Update test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {SuiteUpdate} suiteUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSuite(code: string, id: number, suiteUpdate: SuiteUpdate, options?: any): AxiosPromise<IdResponse>;
};
/**
 * SuitesApi - object-oriented interface
 * @export
 * @class SuitesApi
 * @extends {BaseAPI}
 */
export declare class SuitesApi extends BaseAPI {
    /**
     * This method is used to create a new test suite through API.
     * @summary Create a new test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {SuiteCreate} suiteCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitesApi
     */
    createSuite(code: string, suiteCreate: SuiteCreate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method completely deletes a test suite with test cases from repository.
     * @summary Delete test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {SuiteDelete} [suiteDelete]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitesApi
     */
    deleteSuite(code: string, id: number, suiteDelete?: SuiteDelete, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method allows to retrieve a specific test suite.
     * @summary Get a specific test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitesApi
     */
    getSuite(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuiteResponse, any>>;
    /**
     * This method allows to retrieve all test suites stored in selected project..
     * @summary Get all test suites.
     * @param {string} code Code of project, where to search entities.
     * @param {object} [filters]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitesApi
     */
    getSuites(code: string, filters?: object, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuiteListResponse, any>>;
    /**
     * This method is used to update a test suite through API.
     * @summary Update test suite.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {SuiteUpdate} suiteUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitesApi
     */
    updateSuite(code: string, id: number, suiteUpdate: SuiteUpdate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
}
